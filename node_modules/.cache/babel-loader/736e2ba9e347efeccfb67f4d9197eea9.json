{"ast":null,"code":"import { errorPrefix } from \"./Constants\";\nimport { isNumber } from \"../../Utils/Utils\";\nexport class Vector3d {\n  constructor(xOrCoords, y, z) {\n    this._updateFromAngle = (angle, length) => {\n      this.x = Math.cos(angle) * length;\n      this.y = Math.sin(angle) * length;\n    };\n\n    if (!isNumber(xOrCoords) && xOrCoords) {\n      this.x = xOrCoords.x;\n      this.y = xOrCoords.y;\n      const coords3d = xOrCoords;\n      this.z = coords3d.z ? coords3d.z : 0;\n    } else if (xOrCoords !== undefined && y !== undefined) {\n      this.x = xOrCoords;\n      this.y = y;\n      this.z = z ?? 0;\n    } else {\n      throw new Error(`${errorPrefix} Vector3d not initialized correctly`);\n    }\n  }\n\n  static get origin() {\n    return Vector3d.create(0, 0, 0);\n  }\n\n  get angle() {\n    return Math.atan2(this.y, this.x);\n  }\n\n  set angle(angle) {\n    this._updateFromAngle(angle, this.length);\n  }\n\n  get length() {\n    return Math.sqrt(this.getLengthSq());\n  }\n\n  set length(length) {\n    this._updateFromAngle(this.angle, length);\n  }\n\n  static clone(source) {\n    return Vector3d.create(source.x, source.y, source.z);\n  }\n\n  static create(x, y, z) {\n    return new Vector3d(x, y, z);\n  }\n\n  add(v) {\n    return Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n  }\n\n  addTo(v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n  }\n\n  copy() {\n    return Vector3d.clone(this);\n  }\n\n  distanceTo(v) {\n    return this.sub(v).length;\n  }\n\n  distanceToSq(v) {\n    return this.sub(v).getLengthSq();\n  }\n\n  div(n) {\n    return Vector3d.create(this.x / n, this.y / n, this.z / n);\n  }\n\n  divTo(n) {\n    this.x /= n;\n    this.y /= n;\n    this.z /= n;\n  }\n\n  getLengthSq() {\n    return this.x ** 2 + this.y ** 2;\n  }\n\n  mult(n) {\n    return Vector3d.create(this.x * n, this.y * n, this.z * n);\n  }\n\n  multTo(n) {\n    this.x *= n;\n    this.y *= n;\n    this.z *= n;\n  }\n\n  normalize() {\n    const length = this.length;\n\n    if (length != 0) {\n      this.multTo(1.0 / length);\n    }\n  }\n\n  rotate(angle) {\n    return Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), 0);\n  }\n\n  setTo(c) {\n    this.x = c.x;\n    this.y = c.y;\n    const v3d = c;\n    this.z = v3d.z ? v3d.z : 0;\n  }\n\n  sub(v) {\n    return Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n  }\n\n  subFrom(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n  }\n\n}","map":{"version":3,"names":["errorPrefix","isNumber","Vector3d","constructor","xOrCoords","y","z","_updateFromAngle","angle","length","x","Math","cos","sin","coords3d","undefined","Error","origin","create","atan2","sqrt","getLengthSq","clone","source","add","v","addTo","copy","distanceTo","sub","distanceToSq","div","n","divTo","mult","multTo","normalize","rotate","setTo","c","v3d","subFrom"],"sources":["/Users/mohammedhusain/myportfolio/node_modules/tsparticles-engine/esm/Core/Utils/Vector3d.js"],"sourcesContent":["import { errorPrefix } from \"./Constants\";\nimport { isNumber } from \"../../Utils/Utils\";\nexport class Vector3d {\n    constructor(xOrCoords, y, z) {\n        this._updateFromAngle = (angle, length) => {\n            this.x = Math.cos(angle) * length;\n            this.y = Math.sin(angle) * length;\n        };\n        if (!isNumber(xOrCoords) && xOrCoords) {\n            this.x = xOrCoords.x;\n            this.y = xOrCoords.y;\n            const coords3d = xOrCoords;\n            this.z = coords3d.z ? coords3d.z : 0;\n        }\n        else if (xOrCoords !== undefined && y !== undefined) {\n            this.x = xOrCoords;\n            this.y = y;\n            this.z = z ?? 0;\n        }\n        else {\n            throw new Error(`${errorPrefix} Vector3d not initialized correctly`);\n        }\n    }\n    static get origin() {\n        return Vector3d.create(0, 0, 0);\n    }\n    get angle() {\n        return Math.atan2(this.y, this.x);\n    }\n    set angle(angle) {\n        this._updateFromAngle(angle, this.length);\n    }\n    get length() {\n        return Math.sqrt(this.getLengthSq());\n    }\n    set length(length) {\n        this._updateFromAngle(this.angle, length);\n    }\n    static clone(source) {\n        return Vector3d.create(source.x, source.y, source.z);\n    }\n    static create(x, y, z) {\n        return new Vector3d(x, y, z);\n    }\n    add(v) {\n        return Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n    addTo(v) {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n    }\n    copy() {\n        return Vector3d.clone(this);\n    }\n    distanceTo(v) {\n        return this.sub(v).length;\n    }\n    distanceToSq(v) {\n        return this.sub(v).getLengthSq();\n    }\n    div(n) {\n        return Vector3d.create(this.x / n, this.y / n, this.z / n);\n    }\n    divTo(n) {\n        this.x /= n;\n        this.y /= n;\n        this.z /= n;\n    }\n    getLengthSq() {\n        return this.x ** 2 + this.y ** 2;\n    }\n    mult(n) {\n        return Vector3d.create(this.x * n, this.y * n, this.z * n);\n    }\n    multTo(n) {\n        this.x *= n;\n        this.y *= n;\n        this.z *= n;\n    }\n    normalize() {\n        const length = this.length;\n        if (length != 0) {\n            this.multTo(1.0 / length);\n        }\n    }\n    rotate(angle) {\n        return Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), 0);\n    }\n    setTo(c) {\n        this.x = c.x;\n        this.y = c.y;\n        const v3d = c;\n        this.z = v3d.z ? v3d.z : 0;\n    }\n    sub(v) {\n        return Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n    subFrom(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}