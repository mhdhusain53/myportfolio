{"ast":null,"code":"import { Circle, ExternalInteractorBase, Vector, clamp, getDistances, getEasing, isInArray, mouseMoveEvent } from \"tsparticles-engine\";\nimport { Attract } from \"./Options/Classes/Attract\";\nexport class Attractor extends ExternalInteractorBase {\n  constructor(engine, container) {\n    super(container);\n\n    this._clickAttract = () => {\n      const container = this.container;\n\n      if (!container.attract) {\n        container.attract = {\n          particles: []\n        };\n      }\n\n      const {\n        attract\n      } = container;\n\n      if (!attract.finish) {\n        if (!attract.count) {\n          attract.count = 0;\n        }\n\n        attract.count++;\n\n        if (attract.count === container.particles.count) {\n          attract.finish = true;\n        }\n      }\n\n      if (attract.clicking) {\n        const mousePos = container.interactivity.mouse.clickPosition,\n              attractRadius = container.retina.attractModeDistance;\n\n        if (!attractRadius || attractRadius < 0 || !mousePos) {\n          return;\n        }\n\n        this._processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n      } else if (attract.clicking === false) {\n        attract.particles = [];\n      }\n\n      return;\n    };\n\n    this._hoverAttract = () => {\n      const container = this.container,\n            mousePos = container.interactivity.mouse.position,\n            attractRadius = container.retina.attractModeDistance;\n\n      if (!attractRadius || attractRadius < 0 || !mousePos) {\n        return;\n      }\n\n      this._processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n    };\n\n    this._processAttract = (position, attractRadius, area) => {\n      const container = this.container,\n            attractOptions = container.actualOptions.interactivity.modes.attract;\n\n      if (!attractOptions) {\n        return;\n      }\n\n      const query = container.particles.quadTree.query(area, p => this.isEnabled(p));\n\n      for (const particle of query) {\n        const {\n          dx,\n          dy,\n          distance\n        } = getDistances(particle.position, position);\n        const velocity = attractOptions.speed * attractOptions.factor;\n        const attractFactor = clamp(getEasing(attractOptions.easing)(1 - distance / attractRadius) * velocity, 0, attractOptions.maxSpeed);\n        const normVec = Vector.create(distance === 0 ? velocity : dx / distance * attractFactor, distance === 0 ? velocity : dy / distance * attractFactor);\n        particle.position.subFrom(normVec);\n      }\n    };\n\n    this._engine = engine;\n\n    if (!container.attract) {\n      container.attract = {\n        particles: []\n      };\n    }\n\n    this.handleClickMode = mode => {\n      const options = this.container.actualOptions,\n            attract = options.interactivity.modes.attract;\n\n      if (!attract || mode !== \"attract\") {\n        return;\n      }\n\n      if (!container.attract) {\n        container.attract = {\n          particles: []\n        };\n      }\n\n      container.attract.clicking = true;\n      container.attract.count = 0;\n\n      for (const particle of container.attract.particles) {\n        if (!this.isEnabled(particle)) {\n          continue;\n        }\n\n        particle.velocity.setTo(particle.initialVelocity);\n      }\n\n      container.attract.particles = [];\n      container.attract.finish = false;\n      setTimeout(() => {\n        if (container.destroyed) {\n          return;\n        }\n\n        if (!container.attract) {\n          container.attract = {\n            particles: []\n          };\n        }\n\n        container.attract.clicking = false;\n      }, attract.duration * 1000);\n    };\n  }\n\n  clear() {}\n\n  init() {\n    const container = this.container,\n          attract = container.actualOptions.interactivity.modes.attract;\n\n    if (!attract) {\n      return;\n    }\n\n    container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n  }\n\n  async interact() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouseMoveStatus = container.interactivity.status === mouseMoveEvent,\n          events = options.interactivity.events,\n          hoverEnabled = events.onHover.enable,\n          hoverMode = events.onHover.mode,\n          clickEnabled = events.onClick.enable,\n          clickMode = events.onClick.mode;\n\n    if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n      this._hoverAttract();\n    } else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n      this._clickAttract();\n    }\n  }\n\n  isEnabled(particle) {\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = (particle?.interactivity ?? options.interactivity).events;\n\n    if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode,\n          clickMode = events.onClick.mode;\n    return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n  }\n\n  loadModeOptions(options) {\n    if (!options.attract) {\n      options.attract = new Attract();\n    }\n\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      options.attract.load(source?.attract);\n    }\n  }\n\n  reset() {}\n\n}","map":{"version":3,"names":["Circle","ExternalInteractorBase","Vector","clamp","getDistances","getEasing","isInArray","mouseMoveEvent","Attract","Attractor","constructor","engine","container","_clickAttract","attract","particles","finish","count","clicking","mousePos","interactivity","mouse","clickPosition","attractRadius","retina","attractModeDistance","_processAttract","x","y","_hoverAttract","position","area","attractOptions","actualOptions","modes","query","quadTree","p","isEnabled","particle","dx","dy","distance","velocity","speed","factor","attractFactor","easing","maxSpeed","normVec","create","subFrom","_engine","handleClickMode","mode","options","setTo","initialVelocity","setTimeout","destroyed","duration","clear","init","pixelRatio","interact","mouseMoveStatus","status","events","hoverEnabled","onHover","enable","hoverMode","clickEnabled","onClick","clickMode","loadModeOptions","sources","source","load","reset"],"sources":["/Users/mohammedhusain/myportfolio/node_modules/tsparticles-interaction-external-attract/esm/Attractor.js"],"sourcesContent":["import { Circle, ExternalInteractorBase, Vector, clamp, getDistances, getEasing, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Attract } from \"./Options/Classes/Attract\";\nexport class Attractor extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._clickAttract = () => {\n            const container = this.container;\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            const { attract } = container;\n            if (!attract.finish) {\n                if (!attract.count) {\n                    attract.count = 0;\n                }\n                attract.count++;\n                if (attract.count === container.particles.count) {\n                    attract.finish = true;\n                }\n            }\n            if (attract.clicking) {\n                const mousePos = container.interactivity.mouse.clickPosition, attractRadius = container.retina.attractModeDistance;\n                if (!attractRadius || attractRadius < 0 || !mousePos) {\n                    return;\n                }\n                this._processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n            }\n            else if (attract.clicking === false) {\n                attract.particles = [];\n            }\n            return;\n        };\n        this._hoverAttract = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, attractRadius = container.retina.attractModeDistance;\n            if (!attractRadius || attractRadius < 0 || !mousePos) {\n                return;\n            }\n            this._processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n        };\n        this._processAttract = (position, attractRadius, area) => {\n            const container = this.container, attractOptions = container.actualOptions.interactivity.modes.attract;\n            if (!attractOptions) {\n                return;\n            }\n            const query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                const { dx, dy, distance } = getDistances(particle.position, position);\n                const velocity = attractOptions.speed * attractOptions.factor;\n                const attractFactor = clamp(getEasing(attractOptions.easing)(1 - distance / attractRadius) * velocity, 0, attractOptions.maxSpeed);\n                const normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * attractFactor, distance === 0 ? velocity : (dy / distance) * attractFactor);\n                particle.position.subFrom(normVec);\n            }\n        };\n        this._engine = engine;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, attract = options.interactivity.modes.attract;\n            if (!attract || mode !== \"attract\") {\n                return;\n            }\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            for (const particle of container.attract.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                if (!container.attract) {\n                    container.attract = { particles: [] };\n                }\n                container.attract.clicking = false;\n            }, attract.duration * 1000);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, attract = container.actualOptions.interactivity.modes.attract;\n        if (!attract) {\n            return;\n        }\n        container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n            this._hoverAttract();\n        }\n        else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n            this._clickAttract();\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.attract) {\n            options.attract = new Attract();\n        }\n        for (const source of sources) {\n            options.attract.load(source?.attract);\n        }\n    }\n    reset() {\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}