{"ast":null,"code":"import { Circle } from \"./Circle\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport class QuadTree {\n  constructor(rectangle, capacity) {\n    this.rectangle = rectangle;\n    this.capacity = capacity;\n\n    this._subdivide = () => {\n      const {\n        x,\n        y\n      } = this.rectangle.position,\n            {\n        width,\n        height\n      } = this.rectangle.size,\n            {\n        capacity\n      } = this;\n\n      for (let i = 0; i < 4; i++) {\n        this._subs.push(new QuadTree(new Rectangle(x + width / 2 * (i % 2), y + height / 2 * (Math.round(i / 2) - i % 2), width / 2, height / 2), capacity));\n      }\n\n      this._divided = true;\n    };\n\n    this._points = [];\n    this._divided = false;\n    this._subs = [];\n  }\n\n  insert(point) {\n    if (!this.rectangle.contains(point.position)) {\n      return false;\n    }\n\n    if (this._points.length < this.capacity) {\n      this._points.push(point);\n\n      return true;\n    }\n\n    if (!this._divided) {\n      this._subdivide();\n    }\n\n    return this._subs.some(sub => sub.insert(point));\n  }\n\n  query(range, check, found) {\n    const res = found || [];\n\n    if (!range.intersects(this.rectangle)) {\n      return [];\n    }\n\n    for (const p of this._points) {\n      if (!range.contains(p.position) && getDistance(range.position, p.position) > p.particle.getRadius() && (!check || check(p.particle))) {\n        continue;\n      }\n\n      res.push(p.particle);\n    }\n\n    if (this._divided) {\n      for (const sub of this._subs) {\n        sub.query(range, check, res);\n      }\n    }\n\n    return res;\n  }\n\n  queryCircle(position, radius, check) {\n    return this.query(new Circle(position.x, position.y, radius), check);\n  }\n\n  queryRectangle(position, size, check) {\n    return this.query(new Rectangle(position.x, position.y, size.width, size.height), check);\n  }\n\n}","map":{"version":3,"names":["Circle","Rectangle","getDistance","QuadTree","constructor","rectangle","capacity","_subdivide","x","y","position","width","height","size","i","_subs","push","Math","round","_divided","_points","insert","point","contains","length","some","sub","query","range","check","found","res","intersects","p","particle","getRadius","queryCircle","radius","queryRectangle"],"sources":["/Users/mohammedhusain/myportfolio/node_modules/tsparticles-engine/esm/Core/Utils/QuadTree.js"],"sourcesContent":["import { Circle } from \"./Circle\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport class QuadTree {\n    constructor(rectangle, capacity) {\n        this.rectangle = rectangle;\n        this.capacity = capacity;\n        this._subdivide = () => {\n            const { x, y } = this.rectangle.position, { width, height } = this.rectangle.size, { capacity } = this;\n            for (let i = 0; i < 4; i++) {\n                this._subs.push(new QuadTree(new Rectangle(x + (width / 2) * (i % 2), y + (height / 2) * (Math.round(i / 2) - (i % 2)), width / 2, height / 2), capacity));\n            }\n            this._divided = true;\n        };\n        this._points = [];\n        this._divided = false;\n        this._subs = [];\n    }\n    insert(point) {\n        if (!this.rectangle.contains(point.position)) {\n            return false;\n        }\n        if (this._points.length < this.capacity) {\n            this._points.push(point);\n            return true;\n        }\n        if (!this._divided) {\n            this._subdivide();\n        }\n        return this._subs.some((sub) => sub.insert(point));\n    }\n    query(range, check, found) {\n        const res = found || [];\n        if (!range.intersects(this.rectangle)) {\n            return [];\n        }\n        for (const p of this._points) {\n            if (!range.contains(p.position) &&\n                getDistance(range.position, p.position) > p.particle.getRadius() &&\n                (!check || check(p.particle))) {\n                continue;\n            }\n            res.push(p.particle);\n        }\n        if (this._divided) {\n            for (const sub of this._subs) {\n                sub.query(range, check, res);\n            }\n        }\n        return res;\n    }\n    queryCircle(position, radius, check) {\n        return this.query(new Circle(position.x, position.y, radius), check);\n    }\n    queryRectangle(position, size, check) {\n        return this.query(new Rectangle(position.x, position.y, size.width, size.height), check);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}