{"ast":null,"code":"import { deepExtend, isArray } from \"../../../../Utils/Utils\";\nconst charKey = \"character\",\n      charAltKey = \"char\",\n      imageKey = \"image\",\n      imageAltKey = \"images\",\n      polygonKey = \"polygon\",\n      polygonAltKey = \"star\";\nexport class Shape {\n  constructor() {\n    this.loadShape = (item, mainKey, altKey, altOverride) => {\n      if (!item) {\n        return;\n      }\n\n      const itemIsArray = isArray(item),\n            emptyValue = itemIsArray ? [] : {},\n            mainDifferentValues = itemIsArray !== isArray(this.options[mainKey]),\n            altDifferentValues = itemIsArray !== isArray(this.options[altKey]);\n\n      if (mainDifferentValues) {\n        this.options[mainKey] = emptyValue;\n      }\n\n      if (altDifferentValues && altOverride) {\n        this.options[altKey] = emptyValue;\n      }\n\n      this.options[mainKey] = deepExtend(this.options[mainKey] ?? emptyValue, item);\n\n      if (!this.options[altKey] || altOverride) {\n        this.options[altKey] = deepExtend(this.options[altKey] ?? emptyValue, item);\n      }\n    };\n\n    this.close = true;\n    this.fill = true;\n    this.options = {};\n    this.type = \"circle\";\n  }\n\n  get character() {\n    return this.options[charKey] ?? this.options[charAltKey];\n  }\n\n  set character(value) {\n    this.options[charAltKey] = this.options[charKey] = value;\n  }\n\n  get custom() {\n    return this.options;\n  }\n\n  set custom(value) {\n    this.options = value;\n  }\n\n  get image() {\n    return this.options[imageKey] ?? this.options[imageAltKey];\n  }\n\n  set image(value) {\n    this.options[imageAltKey] = this.options[imageKey] = value;\n  }\n\n  get images() {\n    return this.image;\n  }\n\n  set images(value) {\n    this.image = value;\n  }\n\n  get polygon() {\n    return this.options[polygonKey] ?? this.options[polygonAltKey];\n  }\n\n  set polygon(value) {\n    this.options[polygonAltKey] = this.options[polygonKey] = value;\n  }\n\n  get stroke() {\n    return [];\n  }\n\n  set stroke(_value) {}\n\n  load(data) {\n    if (!data) {\n      return;\n    }\n\n    const options = data.options ?? data.custom;\n\n    if (options !== undefined) {\n      for (const shape in options) {\n        const item = options[shape];\n\n        if (item) {\n          this.options[shape] = deepExtend(this.options[shape] ?? {}, item);\n        }\n      }\n    }\n\n    this.loadShape(data.character, charKey, charAltKey, true);\n    this.loadShape(data.polygon, polygonKey, polygonAltKey, false);\n    this.loadShape(data.image ?? data.images, imageKey, imageAltKey, true);\n\n    if (data.close !== undefined) {\n      this.close = data.close;\n    }\n\n    if (data.fill !== undefined) {\n      this.fill = data.fill;\n    }\n\n    if (data.type !== undefined) {\n      this.type = data.type;\n    }\n  }\n\n}","map":{"version":3,"names":["deepExtend","isArray","charKey","charAltKey","imageKey","imageAltKey","polygonKey","polygonAltKey","Shape","constructor","loadShape","item","mainKey","altKey","altOverride","itemIsArray","emptyValue","mainDifferentValues","options","altDifferentValues","close","fill","type","character","value","custom","image","images","polygon","stroke","_value","load","data","undefined","shape"],"sources":["/Users/mohammedhusain/myportfolio/node_modules/tsparticles-engine/esm/Options/Classes/Particles/Shape/Shape.js"],"sourcesContent":["import { deepExtend, isArray } from \"../../../../Utils/Utils\";\nconst charKey = \"character\", charAltKey = \"char\", imageKey = \"image\", imageAltKey = \"images\", polygonKey = \"polygon\", polygonAltKey = \"star\";\nexport class Shape {\n    constructor() {\n        this.loadShape = (item, mainKey, altKey, altOverride) => {\n            if (!item) {\n                return;\n            }\n            const itemIsArray = isArray(item), emptyValue = itemIsArray ? [] : {}, mainDifferentValues = itemIsArray !== isArray(this.options[mainKey]), altDifferentValues = itemIsArray !== isArray(this.options[altKey]);\n            if (mainDifferentValues) {\n                this.options[mainKey] = emptyValue;\n            }\n            if (altDifferentValues && altOverride) {\n                this.options[altKey] = emptyValue;\n            }\n            this.options[mainKey] = deepExtend(this.options[mainKey] ?? emptyValue, item);\n            if (!this.options[altKey] || altOverride) {\n                this.options[altKey] = deepExtend(this.options[altKey] ?? emptyValue, item);\n            }\n        };\n        this.close = true;\n        this.fill = true;\n        this.options = {};\n        this.type = \"circle\";\n    }\n    get character() {\n        return (this.options[charKey] ?? this.options[charAltKey]);\n    }\n    set character(value) {\n        this.options[charAltKey] = this.options[charKey] = value;\n    }\n    get custom() {\n        return this.options;\n    }\n    set custom(value) {\n        this.options = value;\n    }\n    get image() {\n        return (this.options[imageKey] ?? this.options[imageAltKey]);\n    }\n    set image(value) {\n        this.options[imageAltKey] = this.options[imageKey] = value;\n    }\n    get images() {\n        return this.image;\n    }\n    set images(value) {\n        this.image = value;\n    }\n    get polygon() {\n        return (this.options[polygonKey] ?? this.options[polygonAltKey]);\n    }\n    set polygon(value) {\n        this.options[polygonAltKey] = this.options[polygonKey] = value;\n    }\n    get stroke() {\n        return [];\n    }\n    set stroke(_value) {\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        const options = data.options ?? data.custom;\n        if (options !== undefined) {\n            for (const shape in options) {\n                const item = options[shape];\n                if (item) {\n                    this.options[shape] = deepExtend(this.options[shape] ?? {}, item);\n                }\n            }\n        }\n        this.loadShape(data.character, charKey, charAltKey, true);\n        this.loadShape(data.polygon, polygonKey, polygonAltKey, false);\n        this.loadShape(data.image ?? data.images, imageKey, imageAltKey, true);\n        if (data.close !== undefined) {\n            this.close = data.close;\n        }\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,yBAApC;AACA,MAAMC,OAAO,GAAG,WAAhB;AAAA,MAA6BC,UAAU,GAAG,MAA1C;AAAA,MAAkDC,QAAQ,GAAG,OAA7D;AAAA,MAAsEC,WAAW,GAAG,QAApF;AAAA,MAA8FC,UAAU,GAAG,SAA3G;AAAA,MAAsHC,aAAa,GAAG,MAAtI;AACA,OAAO,MAAMC,KAAN,CAAY;EACfC,WAAW,GAAG;IACV,KAAKC,SAAL,GAAiB,CAACC,IAAD,EAAOC,OAAP,EAAgBC,MAAhB,EAAwBC,WAAxB,KAAwC;MACrD,IAAI,CAACH,IAAL,EAAW;QACP;MACH;;MACD,MAAMI,WAAW,GAAGd,OAAO,CAACU,IAAD,CAA3B;MAAA,MAAmCK,UAAU,GAAGD,WAAW,GAAG,EAAH,GAAQ,EAAnE;MAAA,MAAuEE,mBAAmB,GAAGF,WAAW,KAAKd,OAAO,CAAC,KAAKiB,OAAL,CAAaN,OAAb,CAAD,CAApH;MAAA,MAA6IO,kBAAkB,GAAGJ,WAAW,KAAKd,OAAO,CAAC,KAAKiB,OAAL,CAAaL,MAAb,CAAD,CAAzL;;MACA,IAAII,mBAAJ,EAAyB;QACrB,KAAKC,OAAL,CAAaN,OAAb,IAAwBI,UAAxB;MACH;;MACD,IAAIG,kBAAkB,IAAIL,WAA1B,EAAuC;QACnC,KAAKI,OAAL,CAAaL,MAAb,IAAuBG,UAAvB;MACH;;MACD,KAAKE,OAAL,CAAaN,OAAb,IAAwBZ,UAAU,CAAC,KAAKkB,OAAL,CAAaN,OAAb,KAAyBI,UAA1B,EAAsCL,IAAtC,CAAlC;;MACA,IAAI,CAAC,KAAKO,OAAL,CAAaL,MAAb,CAAD,IAAyBC,WAA7B,EAA0C;QACtC,KAAKI,OAAL,CAAaL,MAAb,IAAuBb,UAAU,CAAC,KAAKkB,OAAL,CAAaL,MAAb,KAAwBG,UAAzB,EAAqCL,IAArC,CAAjC;MACH;IACJ,CAfD;;IAgBA,KAAKS,KAAL,GAAa,IAAb;IACA,KAAKC,IAAL,GAAY,IAAZ;IACA,KAAKH,OAAL,GAAe,EAAf;IACA,KAAKI,IAAL,GAAY,QAAZ;EACH;;EACY,IAATC,SAAS,GAAG;IACZ,OAAQ,KAAKL,OAAL,CAAahB,OAAb,KAAyB,KAAKgB,OAAL,CAAaf,UAAb,CAAjC;EACH;;EACY,IAAToB,SAAS,CAACC,KAAD,EAAQ;IACjB,KAAKN,OAAL,CAAaf,UAAb,IAA2B,KAAKe,OAAL,CAAahB,OAAb,IAAwBsB,KAAnD;EACH;;EACS,IAANC,MAAM,GAAG;IACT,OAAO,KAAKP,OAAZ;EACH;;EACS,IAANO,MAAM,CAACD,KAAD,EAAQ;IACd,KAAKN,OAAL,GAAeM,KAAf;EACH;;EACQ,IAALE,KAAK,GAAG;IACR,OAAQ,KAAKR,OAAL,CAAad,QAAb,KAA0B,KAAKc,OAAL,CAAab,WAAb,CAAlC;EACH;;EACQ,IAALqB,KAAK,CAACF,KAAD,EAAQ;IACb,KAAKN,OAAL,CAAab,WAAb,IAA4B,KAAKa,OAAL,CAAad,QAAb,IAAyBoB,KAArD;EACH;;EACS,IAANG,MAAM,GAAG;IACT,OAAO,KAAKD,KAAZ;EACH;;EACS,IAANC,MAAM,CAACH,KAAD,EAAQ;IACd,KAAKE,KAAL,GAAaF,KAAb;EACH;;EACU,IAAPI,OAAO,GAAG;IACV,OAAQ,KAAKV,OAAL,CAAaZ,UAAb,KAA4B,KAAKY,OAAL,CAAaX,aAAb,CAApC;EACH;;EACU,IAAPqB,OAAO,CAACJ,KAAD,EAAQ;IACf,KAAKN,OAAL,CAAaX,aAAb,IAA8B,KAAKW,OAAL,CAAaZ,UAAb,IAA2BkB,KAAzD;EACH;;EACS,IAANK,MAAM,GAAG;IACT,OAAO,EAAP;EACH;;EACS,IAANA,MAAM,CAACC,MAAD,EAAS,CAClB;;EACDC,IAAI,CAACC,IAAD,EAAO;IACP,IAAI,CAACA,IAAL,EAAW;MACP;IACH;;IACD,MAAMd,OAAO,GAAGc,IAAI,CAACd,OAAL,IAAgBc,IAAI,CAACP,MAArC;;IACA,IAAIP,OAAO,KAAKe,SAAhB,EAA2B;MACvB,KAAK,MAAMC,KAAX,IAAoBhB,OAApB,EAA6B;QACzB,MAAMP,IAAI,GAAGO,OAAO,CAACgB,KAAD,CAApB;;QACA,IAAIvB,IAAJ,EAAU;UACN,KAAKO,OAAL,CAAagB,KAAb,IAAsBlC,UAAU,CAAC,KAAKkB,OAAL,CAAagB,KAAb,KAAuB,EAAxB,EAA4BvB,IAA5B,CAAhC;QACH;MACJ;IACJ;;IACD,KAAKD,SAAL,CAAesB,IAAI,CAACT,SAApB,EAA+BrB,OAA/B,EAAwCC,UAAxC,EAAoD,IAApD;IACA,KAAKO,SAAL,CAAesB,IAAI,CAACJ,OAApB,EAA6BtB,UAA7B,EAAyCC,aAAzC,EAAwD,KAAxD;IACA,KAAKG,SAAL,CAAesB,IAAI,CAACN,KAAL,IAAcM,IAAI,CAACL,MAAlC,EAA0CvB,QAA1C,EAAoDC,WAApD,EAAiE,IAAjE;;IACA,IAAI2B,IAAI,CAACZ,KAAL,KAAea,SAAnB,EAA8B;MAC1B,KAAKb,KAAL,GAAaY,IAAI,CAACZ,KAAlB;IACH;;IACD,IAAIY,IAAI,CAACX,IAAL,KAAcY,SAAlB,EAA6B;MACzB,KAAKZ,IAAL,GAAYW,IAAI,CAACX,IAAjB;IACH;;IACD,IAAIW,IAAI,CAACV,IAAL,KAAcW,SAAlB,EAA6B;MACzB,KAAKX,IAAL,GAAYU,IAAI,CAACV,IAAjB;IACH;EACJ;;AAnFc"},"metadata":{},"sourceType":"module"}