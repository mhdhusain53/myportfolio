{"ast":null,"code":"import { getRangeValue, parseAlpha } from \"./NumberUtils\";\nexport class RgbColorManager {\n  constructor() {\n    this.key = \"rgb\";\n    this.stringPrefix = \"rgb\";\n  }\n\n  handleColor(color) {\n    const colorValue = color.value,\n          rgbColor = colorValue.rgb ?? color.value;\n\n    if (rgbColor.r !== undefined) {\n      return rgbColor;\n    }\n  }\n\n  handleRangeColor(color) {\n    const colorValue = color.value,\n          rgbColor = colorValue.rgb ?? color.value;\n\n    if (rgbColor.r !== undefined) {\n      return {\n        r: getRangeValue(rgbColor.r),\n        g: getRangeValue(rgbColor.g),\n        b: getRangeValue(rgbColor.b)\n      };\n    }\n  }\n\n  parseString(input) {\n    if (!input.startsWith(this.stringPrefix)) {\n      return;\n    }\n\n    const regex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([\\d.%]+)\\s*)?\\)/i,\n          result = regex.exec(input);\n    return result ? {\n      a: result.length > 4 ? parseAlpha(result[5]) : 1,\n      b: parseInt(result[3], 10),\n      g: parseInt(result[2], 10),\n      r: parseInt(result[1], 10)\n    } : undefined;\n  }\n\n}","map":{"version":3,"names":["getRangeValue","parseAlpha","RgbColorManager","constructor","key","stringPrefix","handleColor","color","colorValue","value","rgbColor","rgb","r","undefined","handleRangeColor","g","b","parseString","input","startsWith","regex","result","exec","a","length","parseInt"],"sources":["/Users/mohammedhusain/myportfolio/node_modules/tsparticles-engine/esm/Utils/RgbColorManager.js"],"sourcesContent":["import { getRangeValue, parseAlpha } from \"./NumberUtils\";\nexport class RgbColorManager {\n    constructor() {\n        this.key = \"rgb\";\n        this.stringPrefix = \"rgb\";\n    }\n    handleColor(color) {\n        const colorValue = color.value, rgbColor = colorValue.rgb ?? color.value;\n        if (rgbColor.r !== undefined) {\n            return rgbColor;\n        }\n    }\n    handleRangeColor(color) {\n        const colorValue = color.value, rgbColor = colorValue.rgb ?? color.value;\n        if (rgbColor.r !== undefined) {\n            return {\n                r: getRangeValue(rgbColor.r),\n                g: getRangeValue(rgbColor.g),\n                b: getRangeValue(rgbColor.b),\n            };\n        }\n    }\n    parseString(input) {\n        if (!input.startsWith(this.stringPrefix)) {\n            return;\n        }\n        const regex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([\\d.%]+)\\s*)?\\)/i, result = regex.exec(input);\n        return result\n            ? {\n                a: result.length > 4 ? parseAlpha(result[5]) : 1,\n                b: parseInt(result[3], 10),\n                g: parseInt(result[2], 10),\n                r: parseInt(result[1], 10),\n            }\n            : undefined;\n    }\n}\n"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,eAA1C;AACA,OAAO,MAAMC,eAAN,CAAsB;EACzBC,WAAW,GAAG;IACV,KAAKC,GAAL,GAAW,KAAX;IACA,KAAKC,YAAL,GAAoB,KAApB;EACH;;EACDC,WAAW,CAACC,KAAD,EAAQ;IACf,MAAMC,UAAU,GAAGD,KAAK,CAACE,KAAzB;IAAA,MAAgCC,QAAQ,GAAGF,UAAU,CAACG,GAAX,IAAkBJ,KAAK,CAACE,KAAnE;;IACA,IAAIC,QAAQ,CAACE,CAAT,KAAeC,SAAnB,EAA8B;MAC1B,OAAOH,QAAP;IACH;EACJ;;EACDI,gBAAgB,CAACP,KAAD,EAAQ;IACpB,MAAMC,UAAU,GAAGD,KAAK,CAACE,KAAzB;IAAA,MAAgCC,QAAQ,GAAGF,UAAU,CAACG,GAAX,IAAkBJ,KAAK,CAACE,KAAnE;;IACA,IAAIC,QAAQ,CAACE,CAAT,KAAeC,SAAnB,EAA8B;MAC1B,OAAO;QACHD,CAAC,EAAEZ,aAAa,CAACU,QAAQ,CAACE,CAAV,CADb;QAEHG,CAAC,EAAEf,aAAa,CAACU,QAAQ,CAACK,CAAV,CAFb;QAGHC,CAAC,EAAEhB,aAAa,CAACU,QAAQ,CAACM,CAAV;MAHb,CAAP;IAKH;EACJ;;EACDC,WAAW,CAACC,KAAD,EAAQ;IACf,IAAI,CAACA,KAAK,CAACC,UAAN,CAAiB,KAAKd,YAAtB,CAAL,EAA0C;MACtC;IACH;;IACD,MAAMe,KAAK,GAAG,kEAAd;IAAA,MAAkFC,MAAM,GAAGD,KAAK,CAACE,IAAN,CAAWJ,KAAX,CAA3F;IACA,OAAOG,MAAM,GACP;MACEE,CAAC,EAAEF,MAAM,CAACG,MAAP,GAAgB,CAAhB,GAAoBvB,UAAU,CAACoB,MAAM,CAAC,CAAD,CAAP,CAA9B,GAA4C,CADjD;MAEEL,CAAC,EAAES,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAFb;MAGEN,CAAC,EAAEU,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAHb;MAIET,CAAC,EAAEa,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ;IAJb,CADO,GAOPR,SAPN;EAQH;;AAlCwB"},"metadata":{},"sourceType":"module"}