{"ast":null,"code":"import { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nimport { drawLinkLine, drawLinkTriangle, setLinkFrequency } from \"./Utils\";\nexport class LinkInstance {\n  constructor(container) {\n    this.container = container;\n\n    this._drawLinkLine = (p1, link) => {\n      const p1LinksOptions = p1.options.links;\n\n      if (!p1LinksOptions?.enable) {\n        return;\n      }\n\n      const container = this.container,\n            options = container.actualOptions,\n            p2 = link.destination,\n            pos1 = p1.getPosition(),\n            pos2 = p2.getPosition();\n      let opacity = link.opacity;\n      container.canvas.draw(ctx => {\n        let colorLine;\n        const twinkle = p1.options.twinkle?.lines;\n\n        if (twinkle?.enable) {\n          const twinkleFreq = twinkle.frequency,\n                twinkleRgb = rangeColorToRgb(twinkle.color),\n                twinkling = getRandom() < twinkleFreq;\n\n          if (twinkling && twinkleRgb) {\n            colorLine = twinkleRgb;\n            opacity = getRangeValue(twinkle.opacity);\n          }\n        }\n\n        if (!colorLine) {\n          const linkColor = p1LinksOptions.id !== undefined ? container.particles.linksColors.get(p1LinksOptions.id) : container.particles.linksColor;\n          colorLine = getLinkColor(p1, p2, linkColor);\n        }\n\n        if (!colorLine) {\n          return;\n        }\n\n        const width = p1.retina.linksWidth ?? 0,\n              maxDistance = p1.retina.linksDistance ?? 0,\n              {\n          backgroundMask\n        } = options;\n        drawLinkLine({\n          context: ctx,\n          width,\n          begin: pos1,\n          end: pos2,\n          maxDistance,\n          canvasSize: container.canvas.size,\n          links: p1LinksOptions,\n          backgroundMask: backgroundMask,\n          colorLine,\n          opacity\n        });\n      });\n    };\n\n    this._drawLinkTriangle = (p1, link1, link2) => {\n      const linksOptions = p1.options.links;\n\n      if (!linksOptions?.enable) {\n        return;\n      }\n\n      const triangleOptions = linksOptions.triangles;\n\n      if (!triangleOptions.enable) {\n        return;\n      }\n\n      const container = this.container,\n            options = container.actualOptions,\n            p2 = link1.destination,\n            p3 = link2.destination,\n            opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) / 2;\n\n      if (opacityTriangle <= 0) {\n        return;\n      }\n\n      container.canvas.draw(ctx => {\n        const pos1 = p1.getPosition(),\n              pos2 = p2.getPosition(),\n              pos3 = p3.getPosition(),\n              linksDistance = p1.retina.linksDistance ?? 0;\n\n        if (getDistance(pos1, pos2) > linksDistance || getDistance(pos3, pos2) > linksDistance || getDistance(pos3, pos1) > linksDistance) {\n          return;\n        }\n\n        let colorTriangle = rangeColorToRgb(triangleOptions.color);\n\n        if (!colorTriangle) {\n          const linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n          colorTriangle = getLinkColor(p1, p2, linkColor);\n        }\n\n        if (!colorTriangle) {\n          return;\n        }\n\n        drawLinkTriangle({\n          context: ctx,\n          pos1,\n          pos2,\n          pos3,\n          backgroundMask: options.backgroundMask,\n          colorTriangle,\n          opacityTriangle\n        });\n      });\n    };\n\n    this._drawTriangles = (options, p1, link, p1Links) => {\n      const p2 = link.destination;\n\n      if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {\n        return;\n      }\n\n      const vertices = p2.links?.filter(t => {\n        const linkFreq = this._getLinkFrequency(p2, t.destination);\n\n        return p2.options.links && linkFreq <= p2.options.links.frequency && p1Links.findIndex(l => l.destination === t.destination) >= 0;\n      });\n\n      if (!vertices?.length) {\n        return;\n      }\n\n      for (const vertex of vertices) {\n        const p3 = vertex.destination,\n              triangleFreq = this._getTriangleFrequency(p1, p2, p3);\n\n        if (triangleFreq > options.links.triangles.frequency) {\n          continue;\n        }\n\n        this._drawLinkTriangle(p1, link, vertex);\n      }\n    };\n\n    this._getLinkFrequency = (p1, p2) => {\n      return setLinkFrequency([p1, p2], this._freqs.links);\n    };\n\n    this._getTriangleFrequency = (p1, p2, p3) => {\n      return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n    };\n\n    this._freqs = {\n      links: new Map(),\n      triangles: new Map()\n    };\n  }\n\n  drawParticle(context, particle) {\n    const {\n      links,\n      options\n    } = particle;\n\n    if (!links || links.length <= 0) {\n      return;\n    }\n\n    const p1Links = links.filter(l => options.links && this._getLinkFrequency(particle, l.destination) <= options.links.frequency);\n\n    for (const link of p1Links) {\n      this._drawTriangles(options, particle, link, p1Links);\n\n      if (link.opacity > 0 && (particle.retina.linksWidth ?? 0) > 0) {\n        this._drawLinkLine(particle, link);\n      }\n    }\n  }\n\n  async init() {\n    this._freqs.links = new Map();\n    this._freqs.triangles = new Map();\n  }\n\n  particleCreated(particle) {\n    particle.links = [];\n\n    if (!particle.options.links) {\n      return;\n    }\n\n    const ratio = this.container.retina.pixelRatio,\n          {\n      retina\n    } = particle,\n          {\n      distance,\n      width\n    } = particle.options.links;\n    retina.linksDistance = distance * ratio;\n    retina.linksWidth = width * ratio;\n  }\n\n  particleDestroyed(particle) {\n    particle.links = [];\n  }\n\n}","map":{"version":3,"names":["getDistance","getLinkColor","getRandom","getRangeValue","rangeColorToRgb","drawLinkLine","drawLinkTriangle","setLinkFrequency","LinkInstance","constructor","container","_drawLinkLine","p1","link","p1LinksOptions","options","links","enable","actualOptions","p2","destination","pos1","getPosition","pos2","opacity","canvas","draw","ctx","colorLine","twinkle","lines","twinkleFreq","frequency","twinkleRgb","color","twinkling","linkColor","id","undefined","particles","linksColors","get","linksColor","width","retina","linksWidth","maxDistance","linksDistance","backgroundMask","context","begin","end","canvasSize","size","_drawLinkTriangle","link1","link2","linksOptions","triangleOptions","triangles","p3","opacityTriangle","pos3","colorTriangle","_drawTriangles","p1Links","vertices","filter","t","linkFreq","_getLinkFrequency","findIndex","l","length","vertex","triangleFreq","_getTriangleFrequency","_freqs","Map","drawParticle","particle","init","particleCreated","ratio","pixelRatio","distance","particleDestroyed"],"sources":["/Users/mohammedhusain/myportfolio/node_modules/tsparticles-interaction-particles-links/esm/LinkInstance.js"],"sourcesContent":["import { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb, } from \"tsparticles-engine\";\nimport { drawLinkLine, drawLinkTriangle, setLinkFrequency } from \"./Utils\";\nexport class LinkInstance {\n    constructor(container) {\n        this.container = container;\n        this._drawLinkLine = (p1, link) => {\n            const p1LinksOptions = p1.options.links;\n            if (!p1LinksOptions?.enable) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n            let opacity = link.opacity;\n            container.canvas.draw((ctx) => {\n                let colorLine;\n                const twinkle = p1.options.twinkle?.lines;\n                if (twinkle?.enable) {\n                    const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = getRandom() < twinkleFreq;\n                    if (twinkling && twinkleRgb) {\n                        colorLine = twinkleRgb;\n                        opacity = getRangeValue(twinkle.opacity);\n                    }\n                }\n                if (!colorLine) {\n                    const linkColor = p1LinksOptions.id !== undefined\n                        ? container.particles.linksColors.get(p1LinksOptions.id)\n                        : container.particles.linksColor;\n                    colorLine = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorLine) {\n                    return;\n                }\n                const width = p1.retina.linksWidth ?? 0, maxDistance = p1.retina.linksDistance ?? 0, { backgroundMask } = options;\n                drawLinkLine({\n                    context: ctx,\n                    width,\n                    begin: pos1,\n                    end: pos2,\n                    maxDistance,\n                    canvasSize: container.canvas.size,\n                    links: p1LinksOptions,\n                    backgroundMask: backgroundMask,\n                    colorLine,\n                    opacity,\n                });\n            });\n        };\n        this._drawLinkTriangle = (p1, link1, link2) => {\n            const linksOptions = p1.options.links;\n            if (!linksOptions?.enable) {\n                return;\n            }\n            const triangleOptions = linksOptions.triangles;\n            if (!triangleOptions.enable) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) / 2;\n            if (opacityTriangle <= 0) {\n                return;\n            }\n            container.canvas.draw((ctx) => {\n                const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = p1.retina.linksDistance ?? 0;\n                if (getDistance(pos1, pos2) > linksDistance ||\n                    getDistance(pos3, pos2) > linksDistance ||\n                    getDistance(pos3, pos1) > linksDistance) {\n                    return;\n                }\n                let colorTriangle = rangeColorToRgb(triangleOptions.color);\n                if (!colorTriangle) {\n                    const linkColor = linksOptions.id !== undefined\n                        ? container.particles.linksColors.get(linksOptions.id)\n                        : container.particles.linksColor;\n                    colorTriangle = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorTriangle) {\n                    return;\n                }\n                drawLinkTriangle({\n                    context: ctx,\n                    pos1,\n                    pos2,\n                    pos3,\n                    backgroundMask: options.backgroundMask,\n                    colorTriangle,\n                    opacityTriangle,\n                });\n            });\n        };\n        this._drawTriangles = (options, p1, link, p1Links) => {\n            const p2 = link.destination;\n            if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {\n                return;\n            }\n            const vertices = p2.links?.filter((t) => {\n                const linkFreq = this._getLinkFrequency(p2, t.destination);\n                return (p2.options.links &&\n                    linkFreq <= p2.options.links.frequency &&\n                    p1Links.findIndex((l) => l.destination === t.destination) >= 0);\n            });\n            if (!vertices?.length) {\n                return;\n            }\n            for (const vertex of vertices) {\n                const p3 = vertex.destination, triangleFreq = this._getTriangleFrequency(p1, p2, p3);\n                if (triangleFreq > options.links.triangles.frequency) {\n                    continue;\n                }\n                this._drawLinkTriangle(p1, link, vertex);\n            }\n        };\n        this._getLinkFrequency = (p1, p2) => {\n            return setLinkFrequency([p1, p2], this._freqs.links);\n        };\n        this._getTriangleFrequency = (p1, p2, p3) => {\n            return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n        };\n        this._freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n    }\n    drawParticle(context, particle) {\n        const { links, options } = particle;\n        if (!links || links.length <= 0) {\n            return;\n        }\n        const p1Links = links.filter((l) => options.links && this._getLinkFrequency(particle, l.destination) <= options.links.frequency);\n        for (const link of p1Links) {\n            this._drawTriangles(options, particle, link, p1Links);\n            if (link.opacity > 0 && (particle.retina.linksWidth ?? 0) > 0) {\n                this._drawLinkLine(particle, link);\n            }\n        }\n    }\n    async init() {\n        this._freqs.links = new Map();\n        this._freqs.triangles = new Map();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this.container.retina.pixelRatio, { retina } = particle, { distance, width } = particle.options.links;\n        retina.linksDistance = distance * ratio;\n        retina.linksWidth = width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}