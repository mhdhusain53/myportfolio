{"ast":null,"code":"import { randomInRange } from \"tsparticles-engine\";\n\nfunction updateColorValue(delta, colorValue, valueAnimation, max, decrease) {\n  if (!colorValue || !valueAnimation.enable || (colorValue.maxLoops ?? 0) > 0 && (colorValue.loops ?? 0) > (colorValue.maxLoops ?? 0)) {\n    return;\n  }\n\n  if (!colorValue.time) {\n    colorValue.time = 0;\n  }\n\n  if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n    colorValue.time += delta.value;\n  }\n\n  if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n    return;\n  }\n\n  const offset = randomInRange(valueAnimation.offset),\n        velocity = (colorValue.velocity ?? 0) * delta.factor + offset * 3.6,\n        decay = colorValue.decay ?? 1;\n\n  if (!decrease || colorValue.status === \"increasing\") {\n    colorValue.value += velocity;\n\n    if (colorValue.value > max) {\n      if (!colorValue.loops) {\n        colorValue.loops = 0;\n      }\n\n      colorValue.loops++;\n\n      if (decrease) {\n        colorValue.status = \"decreasing\";\n        colorValue.value -= colorValue.value % max;\n      }\n    }\n  } else {\n    colorValue.value -= velocity;\n\n    if (colorValue.value < 0) {\n      if (!colorValue.loops) {\n        colorValue.loops = 0;\n      }\n\n      colorValue.loops++;\n      colorValue.status = \"increasing\";\n      colorValue.value += colorValue.value;\n    }\n  }\n\n  if (colorValue.velocity && decay !== 1) {\n    colorValue.velocity *= decay;\n  }\n\n  if (colorValue.value > max) {\n    colorValue.value %= max;\n  }\n}\n\nexport function updateColor(particle, delta) {\n  const {\n    h: hAnimation,\n    s: sAnimation,\n    l: lAnimation\n  } = particle.options.color.animation,\n        {\n    color\n  } = particle;\n\n  if (!color) {\n    return;\n  }\n\n  const {\n    h,\n    s,\n    l\n  } = color;\n\n  if (h) {\n    updateColorValue(delta, h, hAnimation, 360, false);\n  }\n\n  if (s) {\n    updateColorValue(delta, s, sAnimation, 100, true);\n  }\n\n  if (l) {\n    updateColorValue(delta, l, lAnimation, 100, true);\n  }\n}","map":{"version":3,"names":["randomInRange","updateColorValue","delta","colorValue","valueAnimation","max","decrease","enable","maxLoops","loops","time","delayTime","value","offset","velocity","factor","decay","status","updateColor","particle","h","hAnimation","s","sAnimation","l","lAnimation","options","color","animation"],"sources":["/Users/mohammedhusain/myportfolio/node_modules/tsparticles-updater-color/esm/Utils.js"],"sourcesContent":["import { randomInRange, } from \"tsparticles-engine\";\nfunction updateColorValue(delta, colorValue, valueAnimation, max, decrease) {\n    if (!colorValue ||\n        !valueAnimation.enable ||\n        ((colorValue.maxLoops ?? 0) > 0 && (colorValue.loops ?? 0) > (colorValue.maxLoops ?? 0))) {\n        return;\n    }\n    if (!colorValue.time) {\n        colorValue.time = 0;\n    }\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n        colorValue.time += delta.value;\n    }\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n        return;\n    }\n    const offset = randomInRange(valueAnimation.offset), velocity = (colorValue.velocity ?? 0) * delta.factor + offset * 3.6, decay = colorValue.decay ?? 1;\n    if (!decrease || colorValue.status === \"increasing\") {\n        colorValue.value += velocity;\n        if (colorValue.value > max) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            if (decrease) {\n                colorValue.status = \"decreasing\";\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n    }\n    else {\n        colorValue.value -= velocity;\n        if (colorValue.value < 0) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            colorValue.status = \"increasing\";\n            colorValue.value += colorValue.value;\n        }\n    }\n    if (colorValue.velocity && decay !== 1) {\n        colorValue.velocity *= decay;\n    }\n    if (colorValue.value > max) {\n        colorValue.value %= max;\n    }\n}\nexport function updateColor(particle, delta) {\n    const { h: hAnimation, s: sAnimation, l: lAnimation } = particle.options.color.animation, { color } = particle;\n    if (!color) {\n        return;\n    }\n    const { h, s, l } = color;\n    if (h) {\n        updateColorValue(delta, h, hAnimation, 360, false);\n    }\n    if (s) {\n        updateColorValue(delta, s, sAnimation, 100, true);\n    }\n    if (l) {\n        updateColorValue(delta, l, lAnimation, 100, true);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}