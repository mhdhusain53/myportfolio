{"ast":null,"code":"import { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Rotate } from \"./Options/Classes/Rotate\";\n\nfunction updateRotate(particle, delta) {\n  const rotate = particle.rotate,\n        rotateOptions = particle.options.rotate;\n\n  if (!rotate || !rotateOptions) {\n    return;\n  }\n\n  const rotateAnimation = rotateOptions.animation,\n        speed = (rotate.velocity ?? 0) * delta.factor,\n        max = 2 * Math.PI,\n        decay = rotate.decay ?? 1;\n\n  if (!rotateAnimation.enable) {\n    return;\n  }\n\n  switch (rotate.status) {\n    case \"increasing\":\n      rotate.value += speed;\n\n      if (rotate.value > max) {\n        rotate.value -= max;\n      }\n\n      break;\n\n    case \"decreasing\":\n    default:\n      rotate.value -= speed;\n\n      if (rotate.value < 0) {\n        rotate.value += max;\n      }\n\n      break;\n  }\n\n  if (rotate.velocity && decay !== 1) {\n    rotate.velocity *= decay;\n  }\n}\n\nexport class RotateUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n\n  init(particle) {\n    const rotateOptions = particle.options.rotate;\n\n    if (!rotateOptions) {\n      return;\n    }\n\n    particle.rotate = {\n      enable: rotateOptions.animation.enable,\n      value: getRangeValue(rotateOptions.value) * Math.PI / 180\n    };\n    particle.pathRotation = rotateOptions.path;\n    let rotateDirection = rotateOptions.direction;\n\n    if (rotateDirection === \"random\") {\n      const index = Math.floor(getRandom() * 2);\n      rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n    }\n\n    switch (rotateDirection) {\n      case \"counter-clockwise\":\n      case \"counterClockwise\":\n        particle.rotate.status = \"decreasing\";\n        break;\n\n      case \"clockwise\":\n        particle.rotate.status = \"increasing\";\n        break;\n    }\n\n    const rotateAnimation = rotateOptions.animation;\n\n    if (rotateAnimation.enable) {\n      particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n      particle.rotate.velocity = getRangeValue(rotateAnimation.speed) / 360 * this.container.retina.reduceFactor;\n\n      if (!rotateAnimation.sync) {\n        particle.rotate.velocity *= getRandom();\n      }\n    }\n\n    particle.rotation = particle.rotate.value;\n  }\n\n  isEnabled(particle) {\n    const rotate = particle.options.rotate;\n\n    if (!rotate) {\n      return false;\n    }\n\n    return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n  }\n\n  loadOptions(options) {\n    if (!options.rotate) {\n      options.rotate = new Rotate();\n    }\n\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      options.rotate.load(source?.rotate);\n    }\n  }\n\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    updateRotate(particle, delta);\n    particle.rotation = particle.rotate?.value ?? 0;\n  }\n\n}","map":{"version":3,"names":["getRandom","getRangeValue","Rotate","updateRotate","particle","delta","rotate","rotateOptions","options","rotateAnimation","animation","speed","velocity","factor","max","Math","PI","decay","enable","status","value","RotateUpdater","constructor","container","init","pathRotation","path","rotateDirection","direction","index","floor","retina","reduceFactor","sync","rotation","isEnabled","destroyed","spawning","loadOptions","sources","source","load","update"],"sources":["/Users/mohammedhusain/myportfolio/node_modules/tsparticles-updater-rotate/esm/RotateUpdater.js"],"sourcesContent":["import { getRandom, getRangeValue, } from \"tsparticles-engine\";\nimport { Rotate } from \"./Options/Classes/Rotate\";\nfunction updateRotate(particle, delta) {\n    const rotate = particle.rotate, rotateOptions = particle.options.rotate;\n    if (!rotate || !rotateOptions) {\n        return;\n    }\n    const rotateAnimation = rotateOptions.animation, speed = (rotate.velocity ?? 0) * delta.factor, max = 2 * Math.PI, decay = rotate.decay ?? 1;\n    if (!rotateAnimation.enable) {\n        return;\n    }\n    switch (rotate.status) {\n        case \"increasing\":\n            rotate.value += speed;\n            if (rotate.value > max) {\n                rotate.value -= max;\n            }\n            break;\n        case \"decreasing\":\n        default:\n            rotate.value -= speed;\n            if (rotate.value < 0) {\n                rotate.value += max;\n            }\n            break;\n    }\n    if (rotate.velocity && decay !== 1) {\n        rotate.velocity *= decay;\n    }\n}\nexport class RotateUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        if (!rotateOptions) {\n            return;\n        }\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: (getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        particle.pathRotation = rotateOptions.path;\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (rotateDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.rotate.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.rotate.status = \"increasing\";\n                break;\n        }\n        const rotateAnimation = rotateOptions.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= getRandom();\n            }\n        }\n        particle.rotation = particle.rotate.value;\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        if (!rotate) {\n            return false;\n        }\n        return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.rotate) {\n            options.rotate = new Rotate();\n        }\n        for (const source of sources) {\n            options.rotate.load(source?.rotate);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRotate(particle, delta);\n        particle.rotation = particle.rotate?.value ?? 0;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}