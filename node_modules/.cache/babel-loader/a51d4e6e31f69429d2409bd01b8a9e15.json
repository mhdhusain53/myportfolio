{"ast":null,"code":"import { getRandom } from \"tsparticles-engine\";\nimport { updateSize } from \"./Utils\";\nexport class SizeUpdater {\n  init(particle) {\n    const container = particle.container,\n          sizeOptions = particle.options.size,\n          sizeAnimation = sizeOptions.animation;\n\n    if (sizeAnimation.enable) {\n      particle.size.velocity = (particle.retina.sizeAnimationSpeed ?? container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        particle.size.velocity *= getRandom();\n      }\n    }\n  }\n\n  isEnabled(particle) {\n    return !particle.destroyed && !particle.spawning && particle.size.enable && ((particle.size.maxLoops ?? 0) <= 0 || (particle.size.maxLoops ?? 0) > 0 && (particle.size.loops ?? 0) < (particle.size.maxLoops ?? 0));\n  }\n\n  reset(particle) {\n    particle.size.loops = 0;\n  }\n\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    updateSize(particle, delta);\n  }\n\n}","map":{"version":3,"names":["getRandom","updateSize","SizeUpdater","init","particle","container","sizeOptions","options","size","sizeAnimation","animation","enable","velocity","retina","sizeAnimationSpeed","reduceFactor","sync","isEnabled","destroyed","spawning","maxLoops","loops","reset","update","delta"],"sources":["/Users/mohammedhusain/myportfolio/node_modules/tsparticles-updater-size/esm/SizeUpdater.js"],"sourcesContent":["import { getRandom } from \"tsparticles-engine\";\nimport { updateSize } from \"./Utils\";\nexport class SizeUpdater {\n    init(particle) {\n        const container = particle.container, sizeOptions = particle.options.size, sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            particle.size.velocity =\n                ((particle.retina.sizeAnimationSpeed ?? container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                particle.size.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            particle.size.enable &&\n            ((particle.size.maxLoops ?? 0) <= 0 ||\n                ((particle.size.maxLoops ?? 0) > 0 && (particle.size.loops ?? 0) < (particle.size.maxLoops ?? 0))));\n    }\n    reset(particle) {\n        particle.size.loops = 0;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateSize(particle, delta);\n    }\n}\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,OAAO,MAAMC,WAAN,CAAkB;EACrBC,IAAI,CAACC,QAAD,EAAW;IACX,MAAMC,SAAS,GAAGD,QAAQ,CAACC,SAA3B;IAAA,MAAsCC,WAAW,GAAGF,QAAQ,CAACG,OAAT,CAAiBC,IAArE;IAAA,MAA2EC,aAAa,GAAGH,WAAW,CAACI,SAAvG;;IACA,IAAID,aAAa,CAACE,MAAlB,EAA0B;MACtBP,QAAQ,CAACI,IAAT,CAAcI,QAAd,GACK,CAACR,QAAQ,CAACS,MAAT,CAAgBC,kBAAhB,IAAsCT,SAAS,CAACQ,MAAV,CAAiBC,kBAAxD,IAA8E,GAA/E,GACIT,SAAS,CAACQ,MAAV,CAAiBE,YAFzB;;MAGA,IAAI,CAACN,aAAa,CAACO,IAAnB,EAAyB;QACrBZ,QAAQ,CAACI,IAAT,CAAcI,QAAd,IAA0BZ,SAAS,EAAnC;MACH;IACJ;EACJ;;EACDiB,SAAS,CAACb,QAAD,EAAW;IAChB,OAAQ,CAACA,QAAQ,CAACc,SAAV,IACJ,CAACd,QAAQ,CAACe,QADN,IAEJf,QAAQ,CAACI,IAAT,CAAcG,MAFV,KAGH,CAACP,QAAQ,CAACI,IAAT,CAAcY,QAAd,IAA0B,CAA3B,KAAiC,CAAjC,IACI,CAAChB,QAAQ,CAACI,IAAT,CAAcY,QAAd,IAA0B,CAA3B,IAAgC,CAAhC,IAAqC,CAAChB,QAAQ,CAACI,IAAT,CAAca,KAAd,IAAuB,CAAxB,KAA8BjB,QAAQ,CAACI,IAAT,CAAcY,QAAd,IAA0B,CAAxD,CAJtC,CAAR;EAKH;;EACDE,KAAK,CAAClB,QAAD,EAAW;IACZA,QAAQ,CAACI,IAAT,CAAca,KAAd,GAAsB,CAAtB;EACH;;EACDE,MAAM,CAACnB,QAAD,EAAWoB,KAAX,EAAkB;IACpB,IAAI,CAAC,KAAKP,SAAL,CAAeb,QAAf,CAAL,EAA+B;MAC3B;IACH;;IACDH,UAAU,CAACG,QAAD,EAAWoB,KAAX,CAAV;EACH;;AA3BoB"},"metadata":{},"sourceType":"module"}