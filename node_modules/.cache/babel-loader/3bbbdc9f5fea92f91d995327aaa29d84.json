{"ast":null,"code":"import { errorPrefix } from \"tsparticles-engine\";\nimport { replaceImageColor } from \"./Utils\";\nexport class ImageDrawer {\n  constructor(engine) {\n    this.loadImageShape = async imageShape => {\n      if (!this._engine.loadImage) {\n        throw new Error(`${errorPrefix} image shape not initialized`);\n      }\n\n      await this._engine.loadImage({\n        gif: imageShape.gif,\n        name: imageShape.name,\n        replaceColor: imageShape.replaceColor ?? imageShape.replace_color ?? false,\n        src: imageShape.src\n      });\n    };\n\n    this._engine = engine;\n  }\n\n  addImage(image) {\n    if (!this._engine.images) {\n      this._engine.images = [];\n    }\n\n    this._engine.images.push(image);\n  }\n\n  draw(context, particle, radius, opacity, delta) {\n    const image = particle.image,\n          element = image?.element;\n\n    if (!image) {\n      return;\n    }\n\n    context.globalAlpha = opacity;\n\n    if (image.gif && image.gifData) {\n      const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height),\n            offscreenContext = offscreenCanvas.getContext(\"2d\");\n\n      if (!offscreenContext) {\n        throw new Error(\"could not create offscreen canvas context\");\n      }\n\n      offscreenContext.imageSmoothingQuality = \"low\";\n      offscreenContext.imageSmoothingEnabled = false;\n      offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n\n      if (particle.gifLoopCount === undefined) {\n        particle.gifLoopCount = image.gifLoopCount ?? 0;\n      }\n\n      let frameIndex = particle.gifFrame ?? 0;\n      const pos = {\n        x: -image.gifData.width * 0.5,\n        y: -image.gifData.height * 0.5\n      },\n            frame = image.gifData.frames[frameIndex];\n\n      if (particle.gifTime === undefined) {\n        particle.gifTime = 0;\n      }\n\n      if (!frame.bitmap) {\n        return;\n      }\n\n      context.scale(radius / image.gifData.width, radius / image.gifData.height);\n\n      switch (frame.disposalMethod) {\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 0:\n          offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n          context.drawImage(offscreenCanvas, pos.x, pos.y);\n          offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n          break;\n\n        case 1:\n          offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n          context.drawImage(offscreenCanvas, pos.x, pos.y);\n          break;\n\n        case 2:\n          offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n          context.drawImage(offscreenCanvas, pos.x, pos.y);\n          offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n\n          if (image.gifData.globalColorTable.length === 0) {\n            offscreenContext.putImageData(image.gifData.frames[0].image, pos.x + frame.left, pos.y + frame.top);\n          } else {\n            offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n          }\n\n          break;\n\n        case 3:\n          {\n            const previousImageData = offscreenContext.getImageData(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n            offscreenContext.putImageData(previousImageData, 0, 0);\n          }\n          break;\n      }\n\n      particle.gifTime += delta.value;\n\n      if (particle.gifTime > frame.delayTime) {\n        particle.gifTime -= frame.delayTime;\n\n        if (++frameIndex >= image.gifData.frames.length) {\n          if (--particle.gifLoopCount <= 0) {\n            return;\n          }\n\n          frameIndex = 0;\n          offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n        }\n\n        particle.gifFrame = frameIndex;\n      }\n\n      context.scale(image.gifData.width / radius, image.gifData.height / radius);\n    } else if (element) {\n      const ratio = image.ratio,\n            pos = {\n        x: -radius,\n        y: -radius\n      };\n      context.drawImage(element, pos.x, pos.y, radius * 2, radius * 2 / ratio);\n    }\n\n    context.globalAlpha = 1;\n  }\n\n  getSidesCount() {\n    return 12;\n  }\n\n  async init(container) {\n    const options = container.actualOptions;\n\n    if (!options.preload || !this._engine.loadImage) {\n      return;\n    }\n\n    for (const imageData of options.preload) {\n      await this._engine.loadImage(imageData);\n    }\n  }\n\n  loadShape(particle) {\n    if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n      return;\n    }\n\n    if (!this._engine.images) {\n      this._engine.images = [];\n    }\n\n    const imageData = particle.shapeData,\n          image = this._engine.images.find(t => t.name === imageData.name || t.source === imageData.src);\n\n    if (!image) {\n      this.loadImageShape(imageData).then(() => {\n        this.loadShape(particle);\n      });\n    }\n  }\n\n  particleInit(container, particle) {\n    if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n      return;\n    }\n\n    if (!this._engine.images) {\n      this._engine.images = [];\n    }\n\n    const images = this._engine.images,\n          imageData = particle.shapeData,\n          color = particle.getFillColor(),\n          image = images.find(t => t.name === imageData.name || t.source === imageData.src);\n\n    if (!image) {\n      return;\n    }\n\n    const replaceColor = imageData.replaceColor ?? imageData.replace_color ?? image.replaceColor;\n\n    if (image.loading) {\n      setTimeout(() => {\n        this.particleInit(container, particle);\n      });\n      return;\n    }\n\n    (async () => {\n      let imageRes;\n\n      if (image.svgData && color) {\n        imageRes = await replaceImageColor(image, imageData, color, particle);\n      } else {\n        imageRes = {\n          color,\n          data: image,\n          element: image.element,\n          gif: image.gif,\n          gifData: image.gifData,\n          gifLoopCount: image.gifLoopCount,\n          loaded: true,\n          ratio: imageData.width && imageData.height ? imageData.width / imageData.height : image.ratio ?? 1,\n          replaceColor: replaceColor,\n          source: imageData.src\n        };\n      }\n\n      if (!imageRes.ratio) {\n        imageRes.ratio = 1;\n      }\n\n      const fill = imageData.fill ?? particle.fill,\n            close = imageData.close ?? particle.close,\n            imageShape = {\n        image: imageRes,\n        fill,\n        close\n      };\n      particle.image = imageShape.image;\n      particle.fill = imageShape.fill;\n      particle.close = imageShape.close;\n    })();\n  }\n\n}","map":{"version":3,"names":["errorPrefix","replaceImageColor","ImageDrawer","constructor","engine","loadImageShape","imageShape","_engine","loadImage","Error","gif","name","replaceColor","replace_color","src","addImage","image","images","push","draw","context","particle","radius","opacity","delta","element","globalAlpha","gifData","offscreenCanvas","OffscreenCanvas","width","height","offscreenContext","getContext","imageSmoothingQuality","imageSmoothingEnabled","clearRect","gifLoopCount","undefined","frameIndex","gifFrame","pos","x","y","frame","frames","gifTime","bitmap","scale","disposalMethod","drawImage","left","top","globalColorTable","length","putImageData","backgroundImage","previousImageData","getImageData","value","delayTime","ratio","getSidesCount","init","container","options","actualOptions","preload","imageData","loadShape","shape","shapeData","find","t","source","then","particleInit","color","getFillColor","loading","setTimeout","imageRes","svgData","data","loaded","fill","close"],"sources":["/Users/mohammedhusain/myportfolio/node_modules/tsparticles-shape-image/esm/ImageDrawer.js"],"sourcesContent":["import { errorPrefix } from \"tsparticles-engine\";\nimport { replaceImageColor } from \"./Utils\";\nexport class ImageDrawer {\n    constructor(engine) {\n        this.loadImageShape = async (imageShape) => {\n            if (!this._engine.loadImage) {\n                throw new Error(`${errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? imageShape.replace_color ?? false,\n                src: imageShape.src,\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    draw(context, particle, radius, opacity, delta) {\n        const image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\n            if (!offscreenContext) {\n                throw new Error(\"could not create offscreen canvas context\");\n            }\n            offscreenContext.imageSmoothingQuality = \"low\";\n            offscreenContext.imageSmoothingEnabled = false;\n            offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n            if (particle.gifLoopCount === undefined) {\n                particle.gifLoopCount = image.gifLoopCount ?? 0;\n            }\n            let frameIndex = particle.gifFrame ?? 0;\n            const pos = { x: -image.gifData.width * 0.5, y: -image.gifData.height * 0.5 }, frame = image.gifData.frames[frameIndex];\n            if (particle.gifTime === undefined) {\n                particle.gifTime = 0;\n            }\n            if (!frame.bitmap) {\n                return;\n            }\n            context.scale(radius / image.gifData.width, radius / image.gifData.height);\n            switch (frame.disposalMethod) {\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 0:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    break;\n                case 1:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    break;\n                case 2:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    if (image.gifData.globalColorTable.length === 0) {\n                        offscreenContext.putImageData(image.gifData.frames[0].image, pos.x + frame.left, pos.y + frame.top);\n                    }\n                    else {\n                        offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n                    }\n                    break;\n                case 3:\n                    {\n                        const previousImageData = offscreenContext.getImageData(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                        context.drawImage(offscreenCanvas, pos.x, pos.y);\n                        offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.putImageData(previousImageData, 0, 0);\n                    }\n                    break;\n            }\n            particle.gifTime += delta.value;\n            if (particle.gifTime > frame.delayTime) {\n                particle.gifTime -= frame.delayTime;\n                if (++frameIndex >= image.gifData.frames.length) {\n                    if (--particle.gifLoopCount <= 0) {\n                        return;\n                    }\n                    frameIndex = 0;\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                }\n                particle.gifFrame = frameIndex;\n            }\n            context.scale(image.gifData.width / radius, image.gifData.height / radius);\n        }\n        else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius,\n            };\n            context.drawImage(element, pos.x, pos.y, radius * 2, (radius * 2) / ratio);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload) {\n            await this._engine.loadImage(imageData);\n        }\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData, image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            this.loadImageShape(imageData).then(() => {\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData, color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? imageData.replace_color ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        (async () => {\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await replaceImageColor(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    gif: image.gif,\n                    gifData: image.gifData,\n                    gifLoopCount: image.gifLoopCount,\n                    loaded: true,\n                    ratio: imageData.width && imageData.height ? imageData.width / imageData.height : image.ratio ?? 1,\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = imageData.fill ?? particle.fill, close = imageData.close ?? particle.close, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.fill = imageShape.fill;\n            particle.close = imageShape.close;\n        })();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}