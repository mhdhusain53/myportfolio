{"ast":null,"code":"import { Circle, ParticlesInteractorBase, getDistances, getLinkRandomColor } from \"tsparticles-engine\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Links } from \"./Options/Classes/Links\";\n\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n  const {\n    dx,\n    dy,\n    distance\n  } = getDistances(pos1, pos2);\n\n  if (!warp || distance <= optDistance) {\n    return distance;\n  }\n\n  const absDiffs = {\n    x: Math.abs(dx),\n    y: Math.abs(dy)\n  },\n        warpDistances = {\n    x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),\n    y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y)\n  };\n  return Math.sqrt(warpDistances.x ** 2 + warpDistances.y ** 2);\n}\n\nexport class Linker extends ParticlesInteractorBase {\n  constructor(container) {\n    super(container);\n\n    this._setColor = p1 => {\n      if (!p1.options.links) {\n        return;\n      }\n\n      const container = this.linkContainer,\n            linksOptions = p1.options.links;\n      let linkColor = linksOptions.id === undefined ? container.particles.linksColor : container.particles.linksColors.get(linksOptions.id);\n\n      if (linkColor) {\n        return;\n      }\n\n      const optColor = linksOptions.color;\n      linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n\n      if (linksOptions.id === undefined) {\n        container.particles.linksColor = linkColor;\n      } else {\n        container.particles.linksColors.set(linksOptions.id, linkColor);\n      }\n    };\n\n    this.linkContainer = container;\n  }\n\n  clear() {}\n\n  init() {\n    this.linkContainer.particles.linksColor = undefined;\n    this.linkContainer.particles.linksColors = new Map();\n  }\n\n  async interact(p1) {\n    if (!p1.options.links) {\n      return;\n    }\n\n    p1.links = [];\n    const pos1 = p1.getPosition(),\n          container = this.container,\n          canvasSize = container.canvas.size;\n\n    if (pos1.x < 0 || pos1.y < 0 || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n      return;\n    }\n\n    const linkOpt1 = p1.options.links,\n          optOpacity = linkOpt1.opacity,\n          optDistance = p1.retina.linksDistance ?? 0,\n          warp = linkOpt1.warp,\n          range = warp ? new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize) : new Circle(pos1.x, pos1.y, optDistance),\n          query = container.particles.quadTree.query(range);\n\n    for (const p2 of query) {\n      const linkOpt2 = p2.options.links;\n\n      if (p1 === p2 || !linkOpt2?.enable || linkOpt1.id !== linkOpt2.id || p2.spawning || p2.destroyed || !p2.links || p1.links.some(t => t.destination === p2) || p2.links.some(t => t.destination === p1)) {\n        continue;\n      }\n\n      const pos2 = p2.getPosition();\n\n      if (pos2.x < 0 || pos2.y < 0 || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n        continue;\n      }\n\n      const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n\n      if (distance > optDistance) {\n        continue;\n      }\n\n      const opacityLine = (1 - distance / optDistance) * optOpacity;\n\n      this._setColor(p1);\n\n      p1.links.push({\n        destination: p2,\n        opacity: opacityLine\n      });\n    }\n  }\n\n  isEnabled(particle) {\n    return !!particle.options.links?.enable;\n  }\n\n  loadParticlesOptions(options) {\n    if (!options.links) {\n      options.links = new Links();\n    }\n\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      options.links.load(source?.links ?? source?.lineLinked ?? source?.line_linked);\n    }\n  }\n\n  reset() {}\n\n}","map":{"version":3,"names":["Circle","ParticlesInteractorBase","getDistances","getLinkRandomColor","CircleWarp","Links","getLinkDistance","pos1","pos2","optDistance","canvasSize","warp","dx","dy","distance","absDiffs","x","Math","abs","y","warpDistances","min","width","height","sqrt","Linker","constructor","container","_setColor","p1","options","links","linkContainer","linksOptions","linkColor","id","undefined","particles","linksColor","linksColors","get","optColor","color","blink","consent","set","clear","init","Map","interact","getPosition","canvas","size","linkOpt1","optOpacity","opacity","retina","linksDistance","range","query","quadTree","p2","linkOpt2","enable","spawning","destroyed","some","t","destination","opacityLine","push","isEnabled","particle","loadParticlesOptions","sources","source","load","lineLinked","line_linked","reset"],"sources":["/Users/mohammedhusain/myportfolio/node_modules/tsparticles-interaction-particles-links/esm/Linker.js"],"sourcesContent":["import { Circle, ParticlesInteractorBase, getDistances, getLinkRandomColor, } from \"tsparticles-engine\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Links } from \"./Options/Classes/Links\";\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    const { dx, dy, distance } = getDistances(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const absDiffs = {\n        x: Math.abs(dx),\n        y: Math.abs(dy),\n    }, warpDistances = {\n        x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),\n        y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y),\n    };\n    return Math.sqrt(warpDistances.x ** 2 + warpDistances.y ** 2);\n}\nexport class Linker extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n        this._setColor = (p1) => {\n            if (!p1.options.links) {\n                return;\n            }\n            const container = this.linkContainer, linksOptions = p1.options.links;\n            let linkColor = linksOptions.id === undefined\n                ? container.particles.linksColor\n                : container.particles.linksColors.get(linksOptions.id);\n            if (linkColor) {\n                return;\n            }\n            const optColor = linksOptions.color;\n            linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            if (linksOptions.id === undefined) {\n                container.particles.linksColor = linkColor;\n            }\n            else {\n                container.particles.linksColors.set(linksOptions.id, linkColor);\n            }\n        };\n        this.linkContainer = container;\n    }\n    clear() {\n    }\n    init() {\n        this.linkContainer.particles.linksColor = undefined;\n        this.linkContainer.particles.linksColors = new Map();\n    }\n    async interact(p1) {\n        if (!p1.options.links) {\n            return;\n        }\n        p1.links = [];\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n        if (pos1.x < 0 || pos1.y < 0 || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? 0, warp = linkOpt1.warp, range = warp\n            ? new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize)\n            : new Circle(pos1.x, pos1.y, optDistance), query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !linkOpt2?.enable ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                !p2.links ||\n                p1.links.some((t) => t.destination === p2) ||\n                p2.links.some((t) => t.destination === p1)) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < 0 || pos2.y < 0 || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                continue;\n            }\n            const opacityLine = (1 - distance / optDistance) * optOpacity;\n            this._setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    isEnabled(particle) {\n        return !!particle.options.links?.enable;\n    }\n    loadParticlesOptions(options, ...sources) {\n        if (!options.links) {\n            options.links = new Links();\n        }\n        for (const source of sources) {\n            options.links.load(source?.links ?? source?.lineLinked ?? source?.line_linked);\n        }\n    }\n    reset() {\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}