{"ast":null,"code":"import { getDistance, getRangeMax, getRangeValue } from \"tsparticles-engine\";\nimport { applyDistance, getProximitySpeedFactor, move, spin } from \"./Utils\";\nconst diffFactor = 2;\nexport class BaseMover {\n  constructor() {\n    this._initSpin = particle => {\n      const container = particle.container,\n            options = particle.options,\n            spinOptions = options.move.spin;\n\n      if (!spinOptions.enable) {\n        return;\n      }\n\n      const spinPos = spinOptions.position ?? {\n        x: 50,\n        y: 50\n      },\n            spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      },\n            pos = particle.getPosition(),\n            distance = getDistance(pos, spinCenter),\n            spinAcceleration = getRangeValue(spinOptions.acceleration);\n      particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n      particle.spin = {\n        center: spinCenter,\n        direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n        angle: particle.velocity.angle,\n        radius: distance,\n        acceleration: particle.retina.spinAcceleration\n      };\n    };\n  }\n\n  init(particle) {\n    const options = particle.options,\n          gravityOptions = options.move.gravity;\n    particle.gravity = {\n      enable: gravityOptions.enable,\n      acceleration: getRangeValue(gravityOptions.acceleration),\n      inverse: gravityOptions.inverse\n    };\n\n    this._initSpin(particle);\n  }\n\n  isEnabled(particle) {\n    return !particle.destroyed && particle.options.move.enable;\n  }\n\n  move(particle, delta) {\n    const particleOptions = particle.options,\n          moveOptions = particleOptions.move;\n\n    if (!moveOptions.enable) {\n      return;\n    }\n\n    const container = particle.container,\n          pxRatio = container.retina.pixelRatio,\n          slowFactor = getProximitySpeedFactor(particle),\n          baseSpeed = (particle.retina.moveSpeed ??= getRangeValue(moveOptions.speed) * pxRatio) * container.retina.reduceFactor,\n          moveDrift = particle.retina.moveDrift ??= getRangeValue(particle.options.move.drift) * pxRatio,\n          maxSize = getRangeMax(particleOptions.size.value) * pxRatio,\n          sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n          moveSpeed = baseSpeed * sizeFactor * slowFactor * (delta.factor || 1) / diffFactor,\n          maxSpeed = particle.retina.maxSpeed ?? container.retina.maxSpeed;\n\n    if (moveOptions.spin.enable) {\n      spin(particle, moveSpeed);\n    } else {\n      move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);\n    }\n\n    applyDistance(particle);\n  }\n\n}","map":{"version":3,"names":["getDistance","getRangeMax","getRangeValue","applyDistance","getProximitySpeedFactor","move","spin","diffFactor","BaseMover","constructor","_initSpin","particle","container","options","spinOptions","enable","spinPos","position","x","y","spinCenter","canvas","size","width","height","pos","getPosition","distance","spinAcceleration","acceleration","retina","pixelRatio","center","direction","velocity","angle","radius","init","gravityOptions","gravity","inverse","isEnabled","destroyed","delta","particleOptions","moveOptions","pxRatio","slowFactor","baseSpeed","moveSpeed","speed","reduceFactor","moveDrift","drift","maxSize","value","sizeFactor","getRadius","factor","maxSpeed"],"sources":["/Users/mohammedhusain/myportfolio/node_modules/tsparticles-move-base/esm/BaseMover.js"],"sourcesContent":["import { getDistance, getRangeMax, getRangeValue, } from \"tsparticles-engine\";\nimport { applyDistance, getProximitySpeedFactor, move, spin } from \"./Utils\";\nconst diffFactor = 2;\nexport class BaseMover {\n    constructor() {\n        this._initSpin = (particle) => {\n            const container = particle.container, options = particle.options, spinOptions = options.move.spin;\n            if (!spinOptions.enable) {\n                return;\n            }\n            const spinPos = spinOptions.position ?? { x: 50, y: 50 }, spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            }, pos = particle.getPosition(), distance = getDistance(pos, spinCenter), spinAcceleration = getRangeValue(spinOptions.acceleration);\n            particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n            particle.spin = {\n                center: spinCenter,\n                direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: particle.velocity.angle,\n                radius: distance,\n                acceleration: particle.retina.spinAcceleration,\n            };\n        };\n    }\n    init(particle) {\n        const options = particle.options, gravityOptions = options.move.gravity;\n        particle.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        this._initSpin(particle);\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, pxRatio = container.retina.pixelRatio, slowFactor = getProximitySpeedFactor(particle), baseSpeed = (particle.retina.moveSpeed ??= getRangeValue(moveOptions.speed) * pxRatio) *\n            container.retina.reduceFactor, moveDrift = (particle.retina.moveDrift ??= getRangeValue(particle.options.move.drift) * pxRatio), maxSize = getRangeMax(particleOptions.size.value) * pxRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, moveSpeed = (baseSpeed * sizeFactor * slowFactor * (delta.factor || 1)) / diffFactor, maxSpeed = particle.retina.maxSpeed ?? container.retina.maxSpeed;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);\n        }\n        applyDistance(particle);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}